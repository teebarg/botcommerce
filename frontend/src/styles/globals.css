@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
    /* Chrome, Safari and Opera */
    .no-scrollbar::-webkit-scrollbar {
        display: none;
    }

    .no-scrollbar::-webkit-scrollbar-track {
        background-color: transparent;
    }

    .no-scrollbar {
        -ms-overflow-style: none; /* IE and Edge */
        scrollbar-width: none; /* Firefox */
    }

    /* input:focus ~ label,
    input:not(:placeholder-shown) ~ label {
        @apply -translate-y-2 text-xsmall-regular;
    }

    input:focus ~ label {
        @apply left-0;
    }

    input:-webkit-autofill,
    input:-webkit-autofill:hover,
    input:-webkit-autofill:focus,
    textarea:-webkit-autofill,
    textarea:-webkit-autofill:hover,
    textarea:-webkit-autofill:focus,
    select:-webkit-autofill,
    select:-webkit-autofill:hover,
    select:-webkit-autofill:focus {
        border: 1px solid #212121;
        -webkit-text-fill-color: #212121;
        -webkit-box-shadow: 0 0 0px 1000px #fff inset;
        transition: background-color 5000s ease-in-out 0s;
    }

    input[type="search"]::-webkit-search-decoration,
    input[type="search"]::-webkit-search-cancel-button,
    input[type="search"]::-webkit-search-results-button,
    input[type="search"]::-webkit-search-results-decoration {
        -webkit-appearance: none;
    } */
}

@layer components {
    .contrast-btn {
        @apply px-4 py-2 border border-black rounded-full hover:bg-black hover:text-white transition-colors duration-200 ease-in;
    }

    .tb-divider {
        @apply shrink-0 bg-divider border-none w-full h-divider;
    }
    .btn-custom {
        @apply relative inline-flex items-center justify-center box-border appearance-none select-none whitespace-nowrap font-normal overflow-hidden outline-none px-4 h-10 text-small gap-2 rounded-medium;
    }

    .combobox {
        @apply w-full relative min-h-10 inline-flex flex-col;
    }

    .combobox-input {
        @apply bg-transparent border-none outline-none flex-grow text-foreground-500 font-normal text-small w-full cursor-pointer;
    }

    .combobox-label {
        @apply block z-10 text-foreground-500 pointer-events-none cursor-pointer will-change-auto !duration-200 !ease-out text-small pe-2 max-w-full text-ellipsis overflow-hidden;
    }

    .combobox-popover {
        @apply absolute w-full rounded-xl bg-content1 shadow-md mt-1 left-0 top-full;
    }

    .combobox-button {
        @apply bg-transparent border-none cursor-pointer flex items-center justify-center;
    }

    .combobox-listbox {
        @apply absolute z-10 w-full border border-divider bg-content1 shadow-md rounded-md max-h-40 overflow-y-auto px-1 py-2 list-none m-0;
    }

    .combobox-option {
        @apply px-2 py-2 cursor-pointer rounded-lg text-small font-semibold hover:bg-content2;
    }
}

.react-aria-Tree {
    display: flex;
    flex-direction: column;
    gap: 2px;
    overflow: auto;
    padding: 4px;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--overlay-background);
    forced-color-adjust: none;
    outline: none;
    width: 250px;
    max-height: 300px;
    box-sizing: border-box;
  
    &[data-focus-visible] {
      outline: 2px solid var(--focus-ring-color);
      outline-offset: -1px;
    }
  
    .react-aria-TreeItem {
      display: flex;
      align-items: center;
      gap: 0.571rem;
      min-height: 28px;
      padding: 0.286rem 0.286rem 0.286rem 0.571rem;
      --padding: 20px;
      padding-left: calc((var(--tree-item-level) - 1) * 20px + 0.571rem + var(--padding));
      border-radius: 6px;
      outline: none;
      cursor: default;
      color: var(--text-color);
      font-size: 1.072rem;
      position: relative;
      transform: translateZ(0);
  
      &[data-has-child-rows] {
        --padding: 0px;
      }
  
      .react-aria-Button[slot=chevron] {
        all: unset;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 1.143rem;
        height: 1.143rem;
  
        svg {
          rotate: 0deg;
          transition: rotate 200ms;
          width: 12px;
          height: 12px;
          fill: none;
          stroke: currentColor;
          stroke-width: 3px;
        }
      }
  
      &[data-expanded] .react-aria-Button[slot=chevron] svg {
        rotate: 90deg;
      }
  
      &[data-focus-visible] {
        outline: 2px solid var(--focus-ring-color);
        outline-offset: -2px;
      }
  
      &[data-pressed] {
        background: var(--gray-100);
      }
  
      &[data-selected] {
        background: var(--highlight-background);
        color: var(--highlight-foreground);
        --focus-ring-color: var(--highlight-foreground);
  
        &[data-focus-visible] {
          outline-color: var(--highlight-foreground);
          outline-offset: -4px;
        }
  
        .react-aria-Button {
          color: var(--highlight-foreground);
          --highlight-hover: rgb(255 255 255 / 0.1);
          --highlight-pressed: rgb(255 255 255 / 0.2);
        }
      }
  
      &[data-disabled] {
        color: var(--text-color-disabled);
      }
  
      .react-aria-Button:not([slot]) {
        margin-left: auto;
        background: transparent;
        border: none;
        font-size: 1.2rem;
        line-height: 1.2em;
        padding: 0.286rem 0.429rem;
        transition: background 200ms;
  
        &[data-hovered] {
          background: var(--highlight-hover);
        }
  
        &[data-pressed] {
          background: var(--highlight-pressed);
          box-shadow: none;
        }
      }
    }
  
    /* join selected items if :has selector is supported */
    @supports selector(:has(.foo)) {
      gap: 0;
  
      .react-aria-TreeItem[data-selected]:has(+ [data-selected]) {
        border-end-start-radius: 0;
        border-end-end-radius: 0;
      }
  
      .react-aria-TreeItem[data-selected] + [data-selected] {
        border-start-start-radius: 0;
        border-start-end-radius: 0;
      }
    }
  
    :where(.react-aria-TreeItem) .react-aria-Checkbox {
      --selected-color: var(--highlight-foreground);
      --selected-color-pressed: var(--highlight-foreground-pressed);
      --checkmark-color: var(--highlight-background);
      --background-color: var(--highlight-background);
    }
  }
