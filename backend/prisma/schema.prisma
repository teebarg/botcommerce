generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = -1
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for consistent data values
enum AddressType {
  HOME
  WORK
  BILLING
  SHIPPING
  OTHER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum PaymentMethod {
  CREDIT_CARD
  CASH_ON_DELIVERY
  BANK_TRANSFER
  PAYSTACK
}

enum ProductStatus {
  IN_STOCK
  OUT_OF_STOCK
}

enum CartStatus {
  ACTIVE
  ABANDONED
  CONVERTED
}

enum PaymentStatus {
  PENDING
  FAILED
  SUCCESS
  REFUNDED
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  PICKUP
}

enum Role {
  ADMIN    @map("admin")
  CUSTOMER @map("customer")

  @@map("roles")
}

enum Status {
  PENDING  @map("pending")
  ACTIVE   @map("active")
  INACTIVE @map("inactive")

  @@map("statuses")
}

enum ShopSettingsType {
  FEATURE
  SHOP_DETAIL
  CUSTOM
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  ABANDONED
}

enum InteractionType {
  VIEW     @map("view")
  PURCHASE @map("purchase")
  CART_ADD @map("cart_add")
  WISHLIST @map("wishlist")
}

enum MessageSender {
  USER
  BOT
  SYSTEM
}

model ActivityLog {
  id                  Int      @id @default(autoincrement())
  user_id             Int
  activity_type       String?  @db.VarChar(255)
  description         String?  @db.VarChar(255)
  action_download_url String?  @db.VarChar(255)
  is_success          Boolean?
  user                User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([created_at])
  @@map("activity_logs")
}

// Address Model
model Address {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      Int
  label        String?
  address_type AddressType @default(HOME)
  first_name   String?
  last_name    String?
  address_1    String
  address_2    String?
  city         String?
  state        String?
  phone        String?
  is_billing   Boolean     @default(false)

  shipping_orders Order[] @relation("ShippingAddress")
  billing_orders  Order[] @relation("BillingAddress")
  shipping_carts  Cart[]  @relation("ShippingCartAddress")
  billing_carts   Cart[]  @relation("BillingCartAddress")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([is_billing])
  @@map("addresses")
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(255)
  slug      String    @unique @db.VarChar(255)
  is_active Boolean
  products  Product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("brands")
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  slug          String     @unique
  image         String?
  is_active     Boolean    @default(true)
  display_order Int        @default(0)
  parent_id     Int? // Nullable for top-level categories
  parent        Category?  @relation("CategoryToSubcategory", fields: [parent_id], references: [id], onDelete: Cascade)
  subcategories Category[] @relation("CategoryToSubcategory")
  products      Product[]  @relation("ProductCategories")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("categories")
}

model Collection {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(255)
  slug      String    @unique @db.VarChar(255)
  is_active Boolean
  products  Product[] @relation("ProductCollections")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("collections")
}

model Product {
  id                 Int                @id @default(autoincrement())
  name               String?            @unique @db.VarChar(255)
  slug               String             @unique @db.VarChar(255)
  sku                String             @unique
  description        String?
  features           Json?              @db.JsonB
  image              String?            @db.VarChar(255)
  active             Boolean            @default(true)
  variants           ProductVariant[]
  ratings            Float?             @default(0)
  categories         Category[]         @relation("ProductCategories")
  collections        Collection[]       @relation("ProductCollections")
  brand              Brand?             @relation(fields: [brand_id], references: [id], onDelete: SetNull)
  brand_id           Int?
  embedding          Json?              @db.JsonB
  tags               Tag[]              @relation("ProductTags")
  images             ProductImage[]
  reviews            Review[]
  favorites          Favorite[]
  user_interactions  UserInteraction[]
  shared_collections SharedCollection[] @relation("SharedCollectionProducts")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([name, slug])
  @@map("products")
}

// ProductVariant Model
model ProductVariant {
  id          Int           @id @default(autoincrement())
  product     Product       @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id  Int
  sku         String        @unique
  status      ProductStatus @default(IN_STOCK)
  price       Float         @db.DoublePrecision
  old_price   Float?        @db.DoublePrecision
  inventory   Int
  size        String?
  color       String?
  measurement Int?
  age         String?
  order_items OrderItem[]
  cart_items  CartItem[] // Added relation to CartItem
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  @@index([product_id])
  @@index([status])
  @@map("product_variants")
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  image      String?  @db.VarChar(255)
  product_id Int?
  product    Product? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order      Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([product_id])
  @@index([product_id, order])
  @@map("product_images")
}

model Review {
  id         Int     @id @default(autoincrement())
  author     String?
  title      String?
  comment    String
  rating     Int
  verified   Boolean @default(false)
  user_id    Int
  product_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user    User    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, product_id])
  @@index([product_id])
  @@index([user_id])
  @@index([rating])
  @@index([created_at])
  @@map("reviews")
}

model SiteConfig {
  id         Int      @id @default(autoincrement())
  key        String   @unique @db.VarChar(255)
  value      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("site_config")
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(255)
  slug      String    @unique @db.VarChar(255)
  is_active Boolean   @default(true)
  products  Product[] @relation("ProductTags")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("tags")
}

// Order Model
model Order {
  id           Int    @id @default(autoincrement())
  order_number String @unique
  user         User   @relation(fields: [user_id], references: [id], onDelete: NoAction)
  user_id      Int

  shipping_address    Address? @relation("ShippingAddress", fields: [shipping_address_id], references: [id], onDelete: SetNull)
  shipping_address_id Int?
  billing_address     Address? @relation("BillingAddress", fields: [billing_address_id], references: [id], onDelete: SetNull)
  billing_address_id  Int?

  email           String?
  order_items     OrderItem[]
  total           Float           @db.DoublePrecision
  subtotal        Float           @db.DoublePrecision
  tax             Float           @db.DoublePrecision
  status          OrderStatus     @default(PENDING)
  payment         Payment?
  payment_method  PaymentMethod
  payment_status  PaymentStatus?  @default(PENDING)
  shipping_method ShippingMethod?
  shipping_fee    Float           @db.DoublePrecision
  coupon          Coupon?         @relation(fields: [coupon_id], references: [id], onDelete: NoAction)
  coupon_id       Int?
  cart            Cart?           @relation(fields: [cart_id], references: [id], onDelete: NoAction) // Optional link to originating cart
  cart_id         Int?            @unique // Added relation to Cart
  order_notes     String?         @db.Text
  invoice_url     String?         @db.Text
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  OrderTimeline   OrderTimeline[]

  @@index([user_id])
  @@index([status])
  @@index([created_at])
  @@index([payment_status])
  @@map("orders")
}

model OrderTimeline {
  id          Int          @id @default(autoincrement())
  order       Order        @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id    Int
  from_status OrderStatus?
  to_status   OrderStatus?
  message     String?      @db.Text
  created_at  DateTime     @default(now())

  @@index([order_id, created_at])
  @@map("order_timeline")
}

// OrderItem Model
model OrderItem {
  id         Int             @id @default(autoincrement())
  name       String?
  order      Order           @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id   Int
  variant    ProductVariant? @relation(fields: [variant_id], references: [id], onDelete: SetNull)
  variant_id Int?
  active     Boolean         @default(true)
  image      String?
  quantity   Int
  price      Float           @db.DoublePrecision
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt

  @@index([order_id])
  @@index([variant_id])
  @@map("order_items")
}

// Payment Model
model Payment {
  id             Int           @id @default(autoincrement())
  order          Order         @relation(fields: [order_id], references: [id], onDelete: NoAction)
  order_id       Int           @unique
  amount         Float         @db.DoublePrecision
  payment_method PaymentMethod
  status         PaymentStatus @default(PENDING)
  reference      String
  transaction_id String
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  @@map("payments")
}

// Coupon Model
model Coupon {
  id              Int          @id @default(autoincrement())
  code            String       @unique
  discount_type   DiscountType
  discount_value  Float        @db.DoublePrecision
  expiration_date DateTime
  orders          Order[]
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  @@map("coupons")
}

// Cart Model
model Cart {
  id              Int             @id @default(autoincrement())
  cart_number     String          @unique
  user            User?           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         Int?
  items           CartItem[] // List of items in the cart
  status          CartStatus      @default(ACTIVE) // Tracks if cart is active, abandoned, or converted
  order           Order?          @relation // Links to the order if cart is converted
  email           String?
  total           Float           @default(0) @db.DoublePrecision
  subtotal        Float           @default(0) @db.DoublePrecision
  tax             Float           @default(0) @db.DoublePrecision
  shipping_fee    Float           @default(0) @db.DoublePrecision
  payment_method  PaymentMethod?
  shipping_method ShippingMethod?

  shipping_address    Address? @relation("ShippingCartAddress", fields: [shipping_address_id], references: [id], onDelete: SetNull)
  shipping_address_id Int?
  billing_address     Address? @relation("BillingCartAddress", fields: [billing_address_id], references: [id], onDelete: SetNull)
  billing_address_id  Int?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt // Used to detect abandoned carts

  @@index([cart_number])
  @@map("carts")
}

// CartItem Model
model CartItem {
  id          Int            @id @default(autoincrement())
  name        String?
  slug        String?
  cart        Cart           @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  cart_id     Int
  cart_number String?
  variant     ProductVariant @relation(fields: [variant_id], references: [id], onDelete: Cascade)
  variant_id  Int
  quantity    Int
  price       Float          @db.DoublePrecision
  image       String?
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt

  @@index([cart_number])
  @@index([variant_id])
  @@index([cart_id])
  @@map("cart_items")
}

// User Model
model User {
  id                         Int               @id @default(autoincrement())
  email                      String            @unique
  hashed_password            String
  first_name                 String?
  last_name                  String?
  status                     Status            @default(PENDING)
  role                       Role              @default(CUSTOMER)
  image                      String?
  email_verified             DateTime?
  email_verification_token   String?
  email_verification_expires DateTime?
  orders                     Order[]
  addresses                  Address[]
  reviews                    Review[]
  favorites                  Favorite[]
  carts                      Cart[]
  activity_logs              ActivityLog[]
  interactions               UserInteraction[]
  preferences                UserPreference[]

  created_at           DateTime?              @default(now())
  updated_at           DateTime?              @updatedAt
  Conversation         Conversation[]
  SharedCollectionView SharedCollectionView[]

  @@index([first_name, last_name, email])
  @@map("users")
}

model Favorite {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, product_id])
  @@index([user_id])
  @@index([created_at])
  @@map("favorites")
}

model ShopSettings {
  id         Int              @id @default(autoincrement())
  key        String           @unique @db.VarChar(255)
  value      String?          @db.Text
  type       ShopSettingsType @default(FEATURE)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@map("shop_settings")
}

model BankDetails {
  id             Int      @id @default(autoincrement())
  bank_name      String   @db.VarChar(255)
  account_name   String   @db.VarChar(255)
  account_number String   @unique @db.VarChar(255)
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("bank_details")
}

model Conversation {
  id                Int                @id @default(autoincrement())
  conversation_uuid String             @unique
  user_id           Int?
  user              User?              @relation(fields: [user_id], references: [id], onDelete: SetNull)
  status            ConversationStatus @default(ACTIVE)
  messages          Message[]
  started_at        DateTime           @default(now())
  last_active       DateTime           @updatedAt

  @@index([user_id, status])
  @@index([conversation_uuid])
  @@map("conversations")
}

model Message {
  id              Int           @id @default(autoincrement())
  conversation_id Int
  conversation    Conversation  @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  content         String        @db.Text
  sender          MessageSender
  timestamp       DateTime      @default(now())

  @@index([conversation_id, timestamp])
  @@map("messages")
}

model FAQ {
  id         Int      @id @default(autoincrement())
  question   String   @unique
  answer     String   @db.Text
  category   String?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([is_active])
  @@index([category])
  @@map("faqs")
}

model CarouselBanner {
  id          Int      @id @default(autoincrement())
  title       String
  subtitle    String?
  description String?  @db.Text
  buttonText  String?
  image       String?  @db.VarChar(255)
  link        String?
  order       Int      @default(0)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("carousel_banners")
}

model DeliveryOption {
  id          Int            @id @default(autoincrement())
  name        String         @unique @db.VarChar(255)
  description String?        @db.Text
  method      ShippingMethod
  amount      Float          @db.DoublePrecision
  duration    String?
  is_active   Boolean        @default(true)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt

  @@map("delivery_options")
}

model UserInteraction {
  id         Int             @id @default(autoincrement())
  user_id    Int
  product_id Int
  type       InteractionType
  timestamp  DateTime        @default(now())
  metadata   Json? // Additional context (time spent, etc.)

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, timestamp])
  @@index([product_id, timestamp])
  @@index([user_id, type])
  @@index([product_id, type])
  @@index([timestamp])
  @@map("user_interactions")
}

model UserPreference {
  id          Int      @id @default(autoincrement())
  user_id     Int
  category    String? // Make nullable for brand-only preferences
  brand       String?
  priceRange  String?
  score       Float    @default(1.0)
  source      String   @default("implicit") // "explicit", "implicit", "inferred"
  confidence  Float    @default(0.5) // How confident we are in this preference
  lastUpdated DateTime @default(now()) @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, category, brand])
  @@map("user_preferences")
}

model SharedCollection {
  id                   Int                    @id @default(autoincrement())
  title                String                 @db.VarChar(255)
  slug                 String                 @unique @db.VarChar(255)
  description          String?                @db.Text
  products             Product[]              @relation("SharedCollectionProducts")
  is_active            Boolean                @default(true)
  view_count           Int                    @default(0)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  SharedCollectionView SharedCollectionView[]

  @@map("shared_collections")
}

model SharedCollectionView {
  id                   Int              @id @default(autoincrement())
  shared_collection    SharedCollection @relation(fields: [shared_collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  shared_collection_id Int
  user_id              Int?
  user                 User?            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ip_address           String?
  user_agent           String?
  timestamp            DateTime         @default(now())

  @@map("shared_collection_views")
}
